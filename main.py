import config
import telebot
from telebot import types  # –∫–Ω–æ–ø–∫–∏
from string import Template

bot = telebot.TeleBot(config.token)

user_dict = {}
Usluga = ''


class User:
    def __init__(self, city):
        self.city = city

        keys = ['fullname', 'phone', 'instagram',
                'dateZapis', 'applyParam', 'Usluga']

        for key in keys:
            self.key = None


# –µ—Å–ª–∏ /help, /start


@bot.message_handler(commands=['help', 'start'])
def send_welcome(message):
    markup_main = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    itembtn1 = types.KeyboardButton('–ö—É—Ä—Å—ã')
    itembtn2 = types.KeyboardButton('–£—Å–ª—É–≥–∏')
    itembtn3 = types.KeyboardButton('–û–±–æ –º–Ω–µ')

    markup_main.add(itembtn1, itembtn2, itembtn3)

    bot.send_message(message.chat.id, "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ "
                     + message.from_user.first_name
                     + ", –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ ‚¨á", reply_markup=markup_main)


def send_welcome2(message):
    markup_main = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    itembtn1 = types.KeyboardButton('–ö—É—Ä—Å—ã')
    itembtn2 = types.KeyboardButton('–£—Å–ª—É–≥–∏')
    itembtn3 = types.KeyboardButton('–û–±–æ –º–Ω–µ')
    markup_main.add(itembtn1, itembtn2, itembtn3)

    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ ‚¨á",
                     reply_markup=markup_main)


@bot.message_handler(content_types=['text'])
def main_menu(message):
    if message.text == '–û–±–æ –º–Ω–µ':
        bot.send_message(message.chat.id, "–ú—ã –Ω–∞–¥–µ–∂–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è"
                         + " company. 10 –ª–µ—Ç –Ω–∞ —Ä—ã–Ω–∫–µ.")
    elif message.text == '–£—Å–ª—É–≥–∏':
        markup = types.ReplyKeyboardMarkup(
            one_time_keyboard=True, resize_keyboard=True)
        itembtn1 = types.KeyboardButton('üåü –°–≤–∞–¥–µ–±–Ω–∞—è –ø—Ä–∏—á–µ—Å–∫–∞ üåü')
        itembtn2 = types.KeyboardButton('üåü –í—ã–ø—É—Å–∫–Ω–∞—è –ø—Ä–∏—á–µ—Å–∫–∞ üåü')
        itembtn3 = types.KeyboardButton('üåü –í–µ—á–µ—Ä–Ω—è—è –ø—Ä–∏—á–µ—Å–∫–∞ üåü')
        itembtn4 = types.KeyboardButton('üåü –ü–ª–µ—Ç–µ–Ω–∏–µ üåü')
        itembtn5 = types.KeyboardButton('üåü –ê—Ñ—Ä–æ–∫—É–¥—Ä–∏ üåü')
        itembtn6 = types.KeyboardButton('üåü –°—Ç—Ä–∏–∂–∫–∏ üåü')
        itembtn7 = types.KeyboardButton('üåü –ü–æ–ª–∏—Ä–æ–≤–∫–∞ üåü')
        markup.add(itembtn1, itembtn2)
        markup.add(itembtn3, itembtn4)
        markup.add(itembtn5, itembtn6)
        markup.add(itembtn7)
        msg = bot.send_message(
            message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É—Å–ª—É–≥–∏:', reply_markup=markup, parse_mode='html')
        bot.register_next_step_handler(msg, process_usluga_step)
    elif message.text == '–ö—É—Ä—Å—ã':
        markup = types.ReplyKeyboardMarkup(
            one_time_keyboard=True, resize_keyboard=True)
        itembtn1 = types.KeyboardButton(
            'üåü –ë–∞–∑–æ–≤—ã–π —ç–∫—Å–ø—Ä–µ—Å—Å-–∫—É—Ä—Å –ø–æ –ø—Ä–∏—á—ë—Å–∫–∞–º üåü')
        itembtn2 = types.KeyboardButton('üåü –°–≤–∞–¥–µ–±–Ω—ã–µ –ø—Ä–∏—á–µ—Å–∫–∏ üåü')
        itembtn3 = types.KeyboardButton('üåü –ü—Ä–∏—á–µ—Å–∫–∏ –¥–ª—è —Å–µ–±—è üåü')
        markup.add(itembtn1)
        markup.add(itembtn2)
        markup.add(itembtn3)
        msg = bot.send_message(
            message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å:', reply_markup=markup, parse_mode='html')
        bot.register_next_step_handler(msg, process_applyparametrs_step)
        global Usluga
        Usluga = message.text


def process_usluga_step(message):
    try:
        chat_id = message.chat.id
        user_dict[chat_id] = User(message.text)
        global Usluga
        Usluga = message.text
        # —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        markup = types.ReplyKeyboardRemove(selective=False)
        if message.text == '–°—Ç—Ä–∏–∂–∫–∏':
            msg = bot.send_message(
                chat_id, '–í –∫–∞–∫–æ–π –ø–æ–ª–æ–≤–∏–Ω–µ –¥–Ω—è –í–∞–º –±—É–¥–µ—Ç —É–¥–æ–±–Ω–æ?\n<b>–ü—Ä–∏–º–µ—Ä:</b> "–í –ø–µ—Ä–≤–æ–π –ø–æ–ª–æ–≤–∏–Ω–µ –¥–Ω—è",\n"–í–æ –≤—Ç–æ—Ä–æ–π –ø–æ–ª–æ–≤–∏–Ω–µ –¥–Ω—è"', reply_markup=markup, parse_mode='html')
            bot.register_next_step_handler(msg, process_applyparametrs_step)
        elif message.text == '–ü–æ–ª–∏—Ä–æ–≤–∫–∞':
            msg = bot.send_message(
                chat_id, '–í –∫–∞–∫–æ–π –ø–æ–ª–æ–≤–∏–Ω–µ –¥–Ω—è –í–∞–º –±—É–¥–µ—Ç —É–¥–æ–±–Ω–æ?\n<b>–ü—Ä–∏–º–µ—Ä:</b> "–í –ø–µ—Ä–≤–æ–π –ø–æ–ª–æ–≤–∏–Ω–µ –¥–Ω—è",\n"–í–æ –≤—Ç–æ—Ä–æ–π –ø–æ–ª–æ–≤–∏–Ω–µ –¥–Ω—è"', reply_markup=markup)
            bot.register_next_step_handler(msg, process_applyparametrs_step)
        else:
            msg = bot.send_message(
                chat_id, '–í–æ —Å–∫–æ–ª—å–∫–æ –í–∞–º –Ω—É–∂–Ω–æ –±—ã—Ç—å –≥–æ—Ç–æ–≤–æ–π?\n<b>–£–∫–∞–∑–∞—Ç—å –≤—Ä–µ–º—è:</b>\n<i>–ü—Ä–∏–º–µ—Ä:</i> "–í 12-00 –Ω—É–∂–Ω–æ –±—ã—Ç—å –≥–æ—Ç–æ–≤–æ–π"', reply_markup=markup, parse_mode='html')
            bot.register_next_step_handler(msg, process_applyparametrs_step)
    except Exception as e:
        bot.reply_to(message, 'ooops!!')


def process_applyparametrs_step(message):
    try:
        chat_id = message.chat.id
        user_dict[chat_id] = User(message.text)
        user = user_dict[chat_id]
        user.applyParam = message.text
        user.fullname = message.from_user.first_name + \
            ' ' + message.from_user.last_name
        if message.text == 'üåü –ë–∞–∑–æ–≤—ã–π —ç–∫—Å–ø—Ä–µ—Å—Å-–∫—É—Ä—Å –ø–æ –ø—Ä–∏—á—ë—Å–∫–∞–º üåü':
            bot.send_message(
                chat_id, '<b>–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∫—É—Ä—Å–∞ :</b>', parse_mode='html')
            bot.send_photo(
                message.chat.id, open('images/kurs_3.jpg', 'rb'))

        elif message.text == 'üåü –°–≤–∞–¥–µ–±–Ω—ã–µ –ø—Ä–∏—á–µ—Å–∫–∏ üåü':
            bot.send_message(
                chat_id, '<b>–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∫—É—Ä—Å–∞ :</b>', parse_mode='html')
            bot.send_photo(
                message.chat.id, open('images/kurs_1.jpg', 'rb'),)

        elif message.text == 'üåü –ü—Ä–∏—á–µ—Å–∫–∏ –¥–ª—è —Å–µ–±—è üåü':
            bot.send_message(
                chat_id, '<b>–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∫—É—Ä—Å–∞ :</b>', parse_mode='html')
            bot.send_photo(
                message.chat.id, open('images/kurs_2.jpg', 'rb'),)

        # —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        markup = types.ReplyKeyboardRemove(selective=False)

        msg = bot.send_message(
            chat_id, '–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –¥–∞—Ç—É\n–í —Ñ–æ—Ä–º–∞—Ç–µ: –î–µ–Ω—å.–ú–µ—Å—è—Ü.–ì–æ–¥', reply_markup=markup)
        bot.register_next_step_handler(msg, process_date_step)

    except Exception as e:
        bot.reply_to(message, 'ooops!!')


def process_date_step(message):
    try:
        chat_id = message.chat.id
        user = user_dict[chat_id]
        user.dateZapis = message.text
        # markup_contact = types.ReplyKeyboardMarkup(
        #     resize_keyboard=True, row_width=2)
        # button_phone = types.KeyboardButton(
        #     text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –∑–∞–ø–∏—Å–∏", request_contact=True)
        # markup_contact.add(button_phone)
        msg = bot.send_message(
            chat_id, '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞')
        bot.register_next_step_handler(msg, process_phone_step)

    except Exception as e:
        bot.reply_to(message, 'ooops!!')


def process_phone_step(message):
    try:
        # int(message.text)

        chat_id = message.chat.id
        user = user_dict[chat_id]
        user.phone = message.text

        msg = bot.send_message(chat_id, '–í–≤–µ–¥–∏—Ç–µ Instagram –ù–∏–∫:')
        bot.register_next_step_handler(msg, process_instagram_step)
        # print(user.phone)
    except Exception as e:
        msg = bot.reply_to(
            message, '–í—ã –≤–≤–µ–ª–∏ —á—Ç–æ —Ç–æ –¥—Ä—É–≥–æ–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.')
        bot.register_next_step_handler(msg, process_phone_step)


def process_instagram_step(message):
    try:
        chat_id = message.chat.id
        user = user_dict[chat_id]
        user.instagram = message.text
        keyboard = types.InlineKeyboardMarkup()  # –Ω–∞—à–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        key_yes = types.InlineKeyboardButton(
            text='–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø–∏—Å—å', callback_data='yes')  # –∫–Ω–æ–ø–∫–∞ ¬´–î–∞¬ª
        keyboard.add(key_yes)  # –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        key_no = types.InlineKeyboardButton(
            text='–°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='no')
        keyboard.add(key_no)
        # –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        bot.send_message(chat_id, getRegData(
            user, '–í–∞—à–∞ –∑–∞—è–≤–∫–∞', message.from_user.first_name + ' –ü–û–î–¢–í–ï–†–î–ò–¢–¨?'), reply_markup=keyboard, parse_mode="Markdown")
        bot.send_message(config.chat_id, getRegData(
            user, '–ó–∞—è–≤–∫–∞ –æ—Ç –±–æ—Ç–∞', bot.get_me().username), parse_mode="Markdown")

    except Exception as e:
        bot.reply_to(message, 'ooops!!')


def getRegData(user, title, name):
    t = Template('$title *$name* \n –ò–Ω—Å—Ç–∞–≥—Ä–∞–º –ù–∏–∫: *$instagram* \n –§–ò–û: *$fullname* \n –¢–µ–ª–µ—Ñ–æ–Ω: *$phone* \n –£—Å–ª—É–≥–∞: *$Usluga* \n –ñ–µ–ª–∞–µ–º–∞—è –¥–∞—Ç–∞: *$dateZapis* \n –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–≤–µ–¥–µ–Ω–∏—è: *$applyParam*')

    return t.substitute({
        'title': title,
        'name': name,
        'instagram': user.instagram,
        'fullname': user.fullname,
        'phone': user.phone,
        'Usluga': Usluga,
        'dateZapis': user.dateZapis,
        'applyParam': user.applyParam,
    })


# @bot.message_handler(content_types=['contact'])
# def hadle_contact(message):
#     try:
#         chat_id = message.chat.id
#         user_dict[chat_id] = User(message.text)
#         user = user_dict[chat_id]
#         user.phone = message.contact.phone_number

#         bot.send_message(message.from_user.id,
#                          f'–Ø –ø–æ–ª—É—á–∏–ª —Ç–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç: {message.contact.phone_number}')
#         msg = bot.send_message(chat_id, '–í–≤–µ–¥–∏—Ç–µ Instagram –ù–∏–∫:')
#         bot.register_next_step_handler(msg, process_instagram_step)
#         print(user.phone)
#     except Exception as e:
#         msg = bot.reply_to(
#             message, '–í—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É')
#         bot.register_next_step_handler(msg, hadle_contact)


@bot.callback_query_handler(func=lambda call: True)
def callback_worker(call):
    chat_id = call.message.chat.id
    message = call.message
    user_dict[chat_id] = User(message.text)
    user = user_dict[chat_id]
    if call.data == "yes":
        bot.answer_callback_query(
            callback_query_id=call.id, show_alert=False, text="–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ")
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id, text='–°–ø–∞—Å–∏–±–æ! üìù –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –∑–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ üìù  \n –û–∂–∏–¥–∞–π—Ç–µ —Å –í–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è üìû', reply_markup=None, parse_mode="html")
        social_buttoms(message)
    elif call.data == "no":
        bot.edit_message_text(chat_id=call.message.chat.id,
                              message_id=call.message.message_id, text="–°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –±–æ—Ç–∞", reply_markup=None)
        send_welcome2(message)
        bot.answer_callback_query(
            callback_query_id=call.id, show_alert=False, text="–í–æ–∑–≤—Ä–∞—Ç")
# –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç


def social_buttoms(message):
    keyboard = types.InlineKeyboardMarkup()  # –Ω–∞—à–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    btn1 = types.InlineKeyboardButton(
        text='üåç –ü–æ—Å–µ—Ç–∏—Ç–µ –º–æ–π –°–∞–π—Ç üåç', url="roihairstylist.top")  # –∫–Ω–æ–ø–∫–∞ ¬´–î–∞¬ª
    keyboard.add(btn1)  # –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    btn2 = types.InlineKeyboardButton(
        text='üì≤ Instagram –ø—Ä–æ—Ñ–∏–ª—å üì≥', url="roihairstylist.top")
    keyboard.add(btn2)
    btn3 = types.InlineKeyboardButton(
        text='üìπ YouTube –∫–∞–Ω–∞–ª üìπ', url="https://www.youtube.com/channel/UCGqUb8O0t_lg3x_0gE22TEg")
    keyboard.add(btn3)
    btn4 = types.InlineKeyboardButton(
        text='üì© –¢–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª üì®', url="https://t.me/tanya_roi_hairstylist")
    keyboard.add(btn4)
    bot.send_message(message.chat.id,
                     '–¢–∞–∫ –∂–µ –º–µ–Ω—è –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –ø–µ—Ä–µ–π–¥—è –ø–æ —Å—Å—ã–ª–∫–∞–º ‚¨á', reply_markup=keyboard, parse_mode="Markdown")


@bot.message_handler(content_types=["text"])
def send_help(message):
    bot.send_message(
        message.chat.id, '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É /start\n–ü–æ–º–æ—â—å - /help')

# –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–µ —Ñ–æ—Ç–æ


@bot.message_handler(content_types=["photo"])
def send_help_text(message):
    bot.send_message(message.chat.id, '–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç')


# Enable saving next step handlers to file "./.handlers-saves/step.save".
# Delay=2 means that after any change in next step handlers (e.g. calling register_next_step_handler())
# saving will hapen after delay 2 seconds.
bot.enable_save_next_step_handlers(delay=2)

# Load next_step_handlers from save file (default "./.handlers-saves/step.save")
# WARNING It will work only if enable_save_next_step_handlers was called!
bot.load_next_step_handlers()

if __name__ == '__main__':
    bot.polling(none_stop=True)
